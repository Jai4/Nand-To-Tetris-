// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel = address[3..5],a = p1, b = p2, c = p3, d = p4,e = p5, f = p6, g = p7, h = p8);
    RAM8(in = in, load = p1, address = address[0..2], out = j1);
    RAM8(in = in, load = p2, address = address[0..2], out = j2);
    RAM8(in = in, load = p3, address = address[0..2], out = j3);
    RAM8(in = in, load = p4, address = address[0..2], out = j4);
    RAM8(in = in, load = p5, address = address[0..2], out = j5);
    RAM8(in = in, load = p6, address = address[0..2], out = j6);
    RAM8(in = in, load = p7, address = address[0..2], out = j7);
    RAM8(in = in, load = p8, address = address[0..2], out = j8);
    Mux8Way16(a = j1, b = j2, c = j3, d = j4, e = j5, f = j6, g = j7, h = j8,sel = address[3..5], out = out);
}